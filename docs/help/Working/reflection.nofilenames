<?xml version="1.0" encoding="utf-8"?>
<reflection>
  <assemblies>
    <assembly name="Gemstone.Expressions">
      <assemblydata version="1.0.7.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyCompanyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Grid Protection Alliance</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyConfigurationAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Release</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCopyrightAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Copyright © 2020</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDescriptionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>GPA Gemstone Expressions Library</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.7.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.7 -- Release Build</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyProductAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Gemstone</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTitleAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Gemstone.Expressions</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
  </assemblies>
  <apis>
    <api id="N:Gemstone.Expressions">
      <topicdata group="api" />
      <apidata name="Gemstone.Expressions" group="namespace" />
      <elements>
        <element api="T:Gemstone.Expressions.RuntimeCompiler" />
        <element api="T:Gemstone.Expressions.StaticDynamic" />
      </elements>
    </api>
    <api id="T:Gemstone.Expressions.RuntimeCompiler">
      <topicdata group="api" />
      <apidata name="RuntimeCompiler" group="type" subgroup="class" />
      <sourceContext file="Gemstone.Expressions/RuntimeCompiler.cs" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Gemstone.Expressions.RuntimeCompiler.Compile(System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions,System.String)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:Gemstone.Expressions.RuntimeCompiler">
      <topicdata name="RuntimeCompiler" group="list" subgroup="Methods" typeTopicId="T:Gemstone.Expressions.RuntimeCompiler" />
      <apidata name="RuntimeCompiler" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Gemstone.Expressions.RuntimeCompiler.Compile(System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions,System.String)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions" />
        <type api="T:Gemstone.Expressions.RuntimeCompiler" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.RuntimeCompiler.Compile(System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions,System.String)">
      <topicdata group="api" />
      <apidata name="Compile" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <sourceContext file="Gemstone.Expressions/RuntimeCompiler.cs" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="code">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="references">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.Assembly" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="options" optional="true">
          <type api="T:Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="assemblyName" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Byte" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions" />
        <type api="T:Gemstone.Expressions.RuntimeCompiler" ref="true" />
      </containers>
    </api>
    <api id="T:Gemstone.Expressions.StaticDynamic">
      <topicdata group="api" />
      <apidata name="StaticDynamic" group="type" subgroup="class" />
      <sourceContext file="Gemstone.Expressions/StaticDynamic.cs" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Dynamic.DynamicObject" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
          <apidata name="GetDynamicMemberNames" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
          <apidata name="GetMetaObject" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="parameter">
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Dynamic.DynamicMetaObject" ref="true" />
          </returns>
          <implements>
            <member api="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
              <type api="T:System.Dynamic.IDynamicMetaObjectProvider" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <apidata name="TryBinaryOperation" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.BinaryOperationBinder" ref="true" />
            </parameter>
            <parameter name="arg">
              <type api="T:System.Object" ref="true" />
            </parameter>
            <parameter name="result" out="true">
              <referenceTo>
                <type api="T:System.Object" ref="true" />
              </referenceTo>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <apidata name="TryConvert" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.ConvertBinder" ref="true" />
            </parameter>
            <parameter name="result" out="true">
              <referenceTo>
                <type api="T:System.Object" ref="true" />
              </referenceTo>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <apidata name="TryCreateInstance" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.CreateInstanceBinder" ref="true" />
            </parameter>
            <parameter name="args">
              <arrayOf rank="1">
                <type api="T:System.Object" ref="true" />
              </arrayOf>
            </parameter>
            <parameter name="result" out="true">
              <referenceTo>
                <type api="T:System.Object" ref="true" />
              </referenceTo>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <apidata name="TryDeleteIndex" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.DeleteIndexBinder" ref="true" />
            </parameter>
            <parameter name="indexes">
              <arrayOf rank="1">
                <type api="T:System.Object" ref="true" />
              </arrayOf>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <apidata name="TryDeleteMember" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.DeleteMemberBinder" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <apidata name="TryGetIndex" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.GetIndexBinder" ref="true" />
            </parameter>
            <parameter name="indexes">
              <arrayOf rank="1">
                <type api="T:System.Object" ref="true" />
              </arrayOf>
            </parameter>
            <parameter name="result" out="true">
              <referenceTo>
                <type api="T:System.Object" ref="true" />
              </referenceTo>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <apidata name="TryInvoke" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.InvokeBinder" ref="true" />
            </parameter>
            <parameter name="args">
              <arrayOf rank="1">
                <type api="T:System.Object" ref="true" />
              </arrayOf>
            </parameter>
            <parameter name="result" out="true">
              <referenceTo>
                <type api="T:System.Object" ref="true" />
              </referenceTo>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <apidata name="TrySetIndex" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.SetIndexBinder" ref="true" />
            </parameter>
            <parameter name="indexes">
              <arrayOf rank="1">
                <type api="T:System.Object" ref="true" />
              </arrayOf>
            </parameter>
            <parameter name="value">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <apidata name="TrySetMember" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.SetMemberBinder" ref="true" />
            </parameter>
            <parameter name="value">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <apidata name="TryUnaryOperation" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.UnaryOperationBinder" ref="true" />
            </parameter>
            <parameter name="result" out="true">
              <referenceTo>
                <type api="T:System.Object" ref="true" />
              </referenceTo>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.StaticDynamic.#ctor(System.Type)" />
        <element api="M:Gemstone.Expressions.StaticDynamic.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)" />
        <element api="M:Gemstone.Expressions.StaticDynamic.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions" />
      </containers>
    </api>
    <api id="Methods.T:Gemstone.Expressions.StaticDynamic">
      <topicdata name="StaticDynamic" group="list" subgroup="Methods" typeTopicId="T:Gemstone.Expressions.StaticDynamic" />
      <apidata name="StaticDynamic" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
          <apidata name="GetDynamicMemberNames" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.String" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
          <apidata name="GetMetaObject" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="parameter">
              <type api="T:System.Linq.Expressions.Expression" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Dynamic.DynamicMetaObject" ref="true" />
          </returns>
          <implements>
            <member api="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
              <type api="T:System.Dynamic.IDynamicMetaObjectProvider" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
          <apidata name="TryBinaryOperation" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.BinaryOperationBinder" ref="true" />
            </parameter>
            <parameter name="arg">
              <type api="T:System.Object" ref="true" />
            </parameter>
            <parameter name="result" out="true">
              <referenceTo>
                <type api="T:System.Object" ref="true" />
              </referenceTo>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
          <apidata name="TryConvert" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.ConvertBinder" ref="true" />
            </parameter>
            <parameter name="result" out="true">
              <referenceTo>
                <type api="T:System.Object" ref="true" />
              </referenceTo>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
          <apidata name="TryCreateInstance" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.CreateInstanceBinder" ref="true" />
            </parameter>
            <parameter name="args">
              <arrayOf rank="1">
                <type api="T:System.Object" ref="true" />
              </arrayOf>
            </parameter>
            <parameter name="result" out="true">
              <referenceTo>
                <type api="T:System.Object" ref="true" />
              </referenceTo>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
          <apidata name="TryDeleteIndex" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.DeleteIndexBinder" ref="true" />
            </parameter>
            <parameter name="indexes">
              <arrayOf rank="1">
                <type api="T:System.Object" ref="true" />
              </arrayOf>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
          <apidata name="TryDeleteMember" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.DeleteMemberBinder" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
          <apidata name="TryGetIndex" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.GetIndexBinder" ref="true" />
            </parameter>
            <parameter name="indexes">
              <arrayOf rank="1">
                <type api="T:System.Object" ref="true" />
              </arrayOf>
            </parameter>
            <parameter name="result" out="true">
              <referenceTo>
                <type api="T:System.Object" ref="true" />
              </referenceTo>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
          <apidata name="TryInvoke" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.InvokeBinder" ref="true" />
            </parameter>
            <parameter name="args">
              <arrayOf rank="1">
                <type api="T:System.Object" ref="true" />
              </arrayOf>
            </parameter>
            <parameter name="result" out="true">
              <referenceTo>
                <type api="T:System.Object" ref="true" />
              </referenceTo>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
          <apidata name="TrySetIndex" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.SetIndexBinder" ref="true" />
            </parameter>
            <parameter name="indexes">
              <arrayOf rank="1">
                <type api="T:System.Object" ref="true" />
              </arrayOf>
            </parameter>
            <parameter name="value">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
          <apidata name="TrySetMember" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.SetMemberBinder" ref="true" />
            </parameter>
            <parameter name="value">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
          <apidata name="TryUnaryOperation" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="binder">
              <type api="T:System.Dynamic.UnaryOperationBinder" ref="true" />
            </parameter>
            <parameter name="result" out="true">
              <referenceTo>
                <type api="T:System.Object" ref="true" />
              </referenceTo>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Dynamic" />
            <type api="T:System.Dynamic.DynamicObject" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.StaticDynamic.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)" />
        <element api="M:Gemstone.Expressions.StaticDynamic.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions" />
        <type api="T:Gemstone.Expressions.StaticDynamic" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.StaticDynamic.#ctor(System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <sourceContext file="Gemstone.Expressions/StaticDynamic.cs" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions" />
        <type api="T:Gemstone.Expressions.StaticDynamic" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.StaticDynamic.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <topicdata group="api" />
      <apidata name="TryGetMember" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/StaticDynamic.cs" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
          <type api="T:System.Dynamic.DynamicObject" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="binder">
          <type api="T:System.Dynamic.GetMemberBinder" ref="true" />
        </parameter>
        <parameter name="result" out="true">
          <referenceTo>
            <type api="T:System.Object" ref="true" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions" />
        <type api="T:Gemstone.Expressions.StaticDynamic" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.StaticDynamic.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <topicdata group="api" />
      <apidata name="TryInvokeMember" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/StaticDynamic.cs" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
          <type api="T:System.Dynamic.DynamicObject" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="binder">
          <type api="T:System.Dynamic.InvokeMemberBinder" ref="true" />
        </parameter>
        <parameter name="args">
          <arrayOf rank="1">
            <type api="T:System.Object" ref="true" />
          </arrayOf>
        </parameter>
        <parameter name="result" out="true">
          <referenceTo>
            <type api="T:System.Object" ref="true" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions" />
        <type api="T:Gemstone.Expressions.StaticDynamic" ref="true" />
      </containers>
    </api>
    <api id="N:Gemstone.Expressions.Evaluator">
      <topicdata group="api" />
      <apidata name="Gemstone.Expressions.Evaluator" group="namespace" />
      <elements>
        <element api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler" />
        <element api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" />
        <element api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" />
        <element api="T:Gemstone.Expressions.Evaluator.Symbol" />
        <element api="T:Gemstone.Expressions.Evaluator.TypeRegistry" />
      </elements>
    </api>
    <api id="T:Gemstone.Expressions.Evaluator.ExpressionCompiler">
      <topicdata group="api" />
      <apidata name="ExpressionCompiler" group="type" subgroup="class" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
            </specialization>
          </type>
          <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <type api="T:System.Object" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler.#ctor(System.String)" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.CompiledAction" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.CompiledFunction" />
        <element api="Overload:Gemstone.Expressions.Evaluator.ExpressionCompiler.ExecuteAction">
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteAction" />
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteAction(`1)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Evaluator.ExpressionCompiler.ExecuteFunction">
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteFunction" />
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteFunction(`1)" />
        </element>
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Compile(System.Boolean)" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.CompiledExpression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Expression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.InstanceParameterType" />
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ToString" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.TypeRegistry" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
      </containers>
    </api>
    <api id="Methods.T:Gemstone.Expressions.Evaluator.ExpressionCompiler">
      <topicdata name="ExpressionCompiler" group="list" subgroup="Methods" typeTopicId="T:Gemstone.Expressions.Evaluator.ExpressionCompiler" />
      <apidata name="ExpressionCompiler" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Gemstone.Expressions.Evaluator.ExpressionCompiler.ExecuteAction">
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteAction" />
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteAction(`1)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Evaluator.ExpressionCompiler.ExecuteFunction">
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteFunction" />
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteFunction(`1)" />
        </element>
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Compile(System.Boolean)" />
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ToString" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler" />
      </containers>
    </api>
    <api id="Properties.T:Gemstone.Expressions.Evaluator.ExpressionCompiler">
      <topicdata name="ExpressionCompiler" group="list" subgroup="Properties" typeTopicId="T:Gemstone.Expressions.Evaluator.ExpressionCompiler" />
      <apidata name="ExpressionCompiler" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.CompiledAction" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.CompiledFunction" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.CompiledExpression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Expression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.InstanceParameterType" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.TypeRegistry" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.ExpressionCompiler.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler" ref="true" />
      </containers>
    </api>
    <api id="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1">
      <topicdata group="api" />
      <apidata name="ExpressionCompiler" group="type" subgroup="class" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" ref="true">
            <specialization>
              <template name="TResult" index="0" api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" />
              <type api="T:System.Object" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
          <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TResult" />
      </templates>
      <elements>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.#ctor(System.String)" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.CompiledAction" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.CompiledFunction" />
        <element api="Overload:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteAction">
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteAction" />
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteAction(`1)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteFunction">
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteFunction" />
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteFunction(`1)" />
        </element>
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Compile(System.Boolean)" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.CompiledExpression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Expression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.InstanceParameterType" />
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ToString" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.TypeRegistry" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
      </containers>
    </api>
    <api id="Methods.T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1">
      <topicdata name="ExpressionCompiler" group="list" subgroup="Methods" typeTopicId="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" />
      <apidata name="ExpressionCompiler" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TResult" />
      </templates>
      <elements>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteAction">
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteAction" />
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteAction(`1)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteFunction">
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteFunction" />
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteFunction(`1)" />
        </element>
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Compile(System.Boolean)" />
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ToString" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" />
      </containers>
    </api>
    <api id="Properties.T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1">
      <topicdata name="ExpressionCompiler" group="list" subgroup="Properties" typeTopicId="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" />
      <apidata name="ExpressionCompiler" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TResult" />
      </templates>
      <elements>
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.CompiledAction" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.CompiledFunction" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.CompiledExpression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Expression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.InstanceParameterType" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.TypeRegistry" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" />
      </containers>
    </api>
    <api id="Overload:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteAction">
      <topicdata name="ExecuteAction" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="ExecuteAction" group="member" subgroup="method" />
      <elements>
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteAction" />
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteAction(`1)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteFunction">
      <topicdata name="ExecuteFunction" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="ExecuteFunction" group="member" subgroup="method" />
      <elements>
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteFunction" />
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteFunction(`1)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.CompiledAction">
      <topicdata group="api" />
      <apidata name="CompiledAction" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_CompiledAction" />
      <returns>
        <type api="T:System.Action" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.CompiledFunction">
      <topicdata group="api" />
      <apidata name="CompiledFunction" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_CompiledFunction" />
      <returns>
        <type api="T:System.Func`1" ref="true">
          <specialization>
            <template name="TResult" index="0" api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteAction">
      <topicdata group="api" />
      <apidata name="ExecuteAction" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteAction" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteFunction">
      <topicdata group="api" />
      <apidata name="ExecuteFunction" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteFunction" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <proceduredata virtual="false" />
      <returns>
        <template name="TResult" index="0" api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" ref="true" />
      </containers>
    </api>
    <api id="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2">
      <topicdata group="api" />
      <apidata name="ExpressionCompiler" group="type" subgroup="class" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TResult" />
        <template name="TInstanceParameter">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.#ctor(System.String)" />
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Compile(System.Boolean)" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.CompiledAction" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.CompiledExpression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.CompiledFunction" />
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteAction(`1)" />
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteFunction(`1)" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Expression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.InstanceParameterType" />
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ToString" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.TypeRegistry" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
      </containers>
    </api>
    <api id="Methods.T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2">
      <topicdata name="ExpressionCompiler" group="list" subgroup="Methods" typeTopicId="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" />
      <apidata name="ExpressionCompiler" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TResult" />
        <template name="TInstanceParameter">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Compile(System.Boolean)" />
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteAction(`1)" />
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteFunction(`1)" />
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ToString" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" />
      </containers>
    </api>
    <api id="Properties.T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2">
      <topicdata name="ExpressionCompiler" group="list" subgroup="Properties" typeTopicId="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" />
      <apidata name="ExpressionCompiler" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="TResult" />
        <template name="TInstanceParameter">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.CompiledAction" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.CompiledExpression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.CompiledFunction" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Expression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.InstanceParameterType" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.TypeRegistry" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Compile(System.Boolean)">
      <topicdata group="api" />
      <apidata name="Compile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="isMethodCall" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.CompiledAction">
      <topicdata group="api" />
      <apidata name="CompiledAction" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_CompiledAction" />
      <returns>
        <type api="T:System.Action`1" ref="true">
          <specialization>
            <template name="TInstanceParameter" index="1" api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.CompiledExpression">
      <topicdata group="api" />
      <apidata name="CompiledExpression" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_CompiledExpression" />
      <returns>
        <type api="T:System.Linq.Expressions.Expression" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.CompiledFunction">
      <topicdata group="api" />
      <apidata name="CompiledFunction" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_CompiledFunction" />
      <returns>
        <type api="T:System.Func`2" ref="true">
          <specialization>
            <template name="TInstanceParameter" index="1" api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" />
            <template name="TResult" index="0" api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteAction(`1)">
      <topicdata group="api" />
      <apidata name="ExecuteAction" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="instance">
          <template name="TInstanceParameter" index="1" api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteFunction(`1)">
      <topicdata group="api" />
      <apidata name="ExecuteFunction" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="instance">
          <template name="TInstanceParameter" index="1" api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" />
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="0" api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Expression">
      <topicdata group="api" />
      <apidata name="Expression" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Expression" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.InstanceParameterType">
      <topicdata group="api" />
      <apidata name="InstanceParameterType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_InstanceParameterType" />
      <setter name="set_InstanceParameterType" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.TypeRegistry">
      <topicdata group="api" />
      <apidata name="TypeRegistry" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/ExpressionCompiler.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_TypeRegistry" />
      <setter name="set_TypeRegistry" />
      <returns>
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" ref="true" />
      </containers>
    </api>
    <api id="T:Gemstone.Expressions.Evaluator.Symbol">
      <topicdata group="api" />
      <apidata name="Symbol" group="type" subgroup="class" />
      <sourceContext file="Gemstone.Expressions/Evaluator/Symbol.cs" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Gemstone.Expressions.Evaluator.Symbol.#ctor">
          <element api="M:Gemstone.Expressions.Evaluator.Symbol.#ctor(System.String,System.Type)" />
          <element api="M:Gemstone.Expressions.Evaluator.Symbol.#ctor(System.String,System.Type,System.Object)" />
        </element>
        <element api="P:Gemstone.Expressions.Evaluator.Symbol.Name" />
        <element api="P:Gemstone.Expressions.Evaluator.Symbol.Type" />
        <element api="P:Gemstone.Expressions.Evaluator.Symbol.Value" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
      </containers>
    </api>
    <api id="Methods.T:Gemstone.Expressions.Evaluator.Symbol">
      <topicdata name="Symbol" group="list" subgroup="Methods" typeTopicId="T:Gemstone.Expressions.Evaluator.Symbol" />
      <apidata name="Symbol" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.Symbol" />
      </containers>
    </api>
    <api id="Properties.T:Gemstone.Expressions.Evaluator.Symbol">
      <topicdata name="Symbol" group="list" subgroup="Properties" typeTopicId="T:Gemstone.Expressions.Evaluator.Symbol" />
      <apidata name="Symbol" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Gemstone.Expressions.Evaluator.Symbol.Name" />
        <element api="P:Gemstone.Expressions.Evaluator.Symbol.Type" />
        <element api="P:Gemstone.Expressions.Evaluator.Symbol.Value" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.Symbol" />
      </containers>
    </api>
    <api id="Overload:Gemstone.Expressions.Evaluator.Symbol.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" allMembersTopicId="" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:Gemstone.Expressions.Evaluator.Symbol.#ctor(System.String,System.Type)" />
        <element api="M:Gemstone.Expressions.Evaluator.Symbol.#ctor(System.String,System.Type,System.Object)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.Symbol" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.Symbol.#ctor(System.String,System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Gemstone.Expressions.Evaluator.Symbol.#ctor" />
      <sourceContext file="Gemstone.Expressions/Evaluator/Symbol.cs" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.Symbol" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.Symbol.#ctor(System.String,System.Type,System.Object)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Gemstone.Expressions.Evaluator.Symbol.#ctor" />
      <sourceContext file="Gemstone.Expressions/Evaluator/Symbol.cs" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="value">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.Symbol" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Evaluator.Symbol.Name">
      <topicdata group="api" />
      <apidata name="Name" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/Symbol.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Name" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.Symbol" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Evaluator.Symbol.Type">
      <topicdata group="api" />
      <apidata name="Type" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/Symbol.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Type" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.Symbol" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Evaluator.Symbol.Value">
      <topicdata group="api" />
      <apidata name="Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/Symbol.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Value" />
      <setter name="set_Value" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.Symbol" ref="true" />
      </containers>
    </api>
    <api id="T:Gemstone.Expressions.Evaluator.TypeRegistry">
      <topicdata group="api" />
      <apidata name="TypeRegistry" group="type" subgroup="class" />
      <sourceContext file="Gemstone.Expressions/Evaluator/TypeRegistry.cs" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.#ctor" />
        <element api="P:Gemstone.Expressions.Evaluator.TypeRegistry.Assemblies" />
        <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.Clone" />
        <element api="P:Gemstone.Expressions.Evaluator.TypeRegistry.GeneratedContextTypeCount" />
        <element api="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.GetContextType">
          <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.GetContextType``2" />
          <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.GetContextType(System.Type,System.Type)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.GetNewContext">
          <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.GetNewContext``2" />
          <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.GetNewContext(System.Type,System.Type)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.Item">
          <element api="P:Gemstone.Expressions.Evaluator.TypeRegistry.Item(System.String)" />
          <element api="P:Gemstone.Expressions.Evaluator.TypeRegistry.Item(System.String,System.Type)" />
        </element>
        <element api="P:Gemstone.Expressions.Evaluator.TypeRegistry.Namespaces" />
        <element api="P:Gemstone.Expressions.Evaluator.TypeRegistry.RegisteredSymbols" />
        <element api="P:Gemstone.Expressions.Evaluator.TypeRegistry.RegisteredTypes" />
        <element api="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterSymbol">
          <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterSymbol(Gemstone.Expressions.Evaluator.Symbol)" />
          <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterSymbol``1(System.String,``0)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterType">
          <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterType``1" />
          <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterType(System.Type)" />
        </element>
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
      </containers>
    </api>
    <api id="Methods.T:Gemstone.Expressions.Evaluator.TypeRegistry">
      <topicdata name="TypeRegistry" group="list" subgroup="Methods" typeTopicId="T:Gemstone.Expressions.Evaluator.TypeRegistry" />
      <apidata name="TypeRegistry" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.Clone" />
        <element api="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.GetContextType">
          <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.GetContextType``2" />
          <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.GetContextType(System.Type,System.Type)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.GetNewContext">
          <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.GetNewContext``2" />
          <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.GetNewContext(System.Type,System.Type)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterSymbol">
          <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterSymbol(Gemstone.Expressions.Evaluator.Symbol)" />
          <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterSymbol``1(System.String,``0)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterType">
          <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterType``1" />
          <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterType(System.Type)" />
        </element>
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" />
      </containers>
    </api>
    <api id="Properties.T:Gemstone.Expressions.Evaluator.TypeRegistry">
      <topicdata name="TypeRegistry" group="list" subgroup="Properties" typeTopicId="T:Gemstone.Expressions.Evaluator.TypeRegistry" />
      <apidata name="TypeRegistry" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Gemstone.Expressions.Evaluator.TypeRegistry.Assemblies" />
        <element api="P:Gemstone.Expressions.Evaluator.TypeRegistry.GeneratedContextTypeCount" />
        <element api="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.Item">
          <element api="P:Gemstone.Expressions.Evaluator.TypeRegistry.Item(System.String)" />
          <element api="P:Gemstone.Expressions.Evaluator.TypeRegistry.Item(System.String,System.Type)" />
        </element>
        <element api="P:Gemstone.Expressions.Evaluator.TypeRegistry.Namespaces" />
        <element api="P:Gemstone.Expressions.Evaluator.TypeRegistry.RegisteredSymbols" />
        <element api="P:Gemstone.Expressions.Evaluator.TypeRegistry.RegisteredTypes" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" />
      </containers>
    </api>
    <api id="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.GetContextType">
      <topicdata name="GetContextType" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="GetContextType" group="member" subgroup="method" />
      <elements>
        <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.GetContextType``2" />
        <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.GetContextType(System.Type,System.Type)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.GetNewContext">
      <topicdata name="GetNewContext" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="GetNewContext" group="member" subgroup="method" />
      <elements>
        <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.GetNewContext``2" />
        <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.GetNewContext(System.Type,System.Type)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.Item">
      <topicdata name="Item" group="list" subgroup="overload" memberSubgroup="property" pseudo="true" allMembersTopicId="" />
      <apidata name="Item" group="member" subgroup="property" />
      <elements>
        <element api="P:Gemstone.Expressions.Evaluator.TypeRegistry.Item(System.String)" />
        <element api="P:Gemstone.Expressions.Evaluator.TypeRegistry.Item(System.String,System.Type)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterSymbol">
      <topicdata name="RegisterSymbol" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="RegisterSymbol" group="member" subgroup="method" />
      <elements>
        <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterSymbol(Gemstone.Expressions.Evaluator.Symbol)" />
        <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterSymbol``1(System.String,``0)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterType">
      <topicdata name="RegisterType" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="RegisterType" group="member" subgroup="method" />
      <elements>
        <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterType``1" />
        <element api="M:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterType(System.Type)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.TypeRegistry.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <sourceContext file="Gemstone.Expressions/Evaluator/TypeRegistry.cs" />
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Evaluator.TypeRegistry.Assemblies">
      <topicdata group="api" />
      <apidata name="Assemblies" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/TypeRegistry.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Assemblies" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Reflection.Assembly" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.TypeRegistry.Clone">
      <topicdata group="api" />
      <apidata name="Clone" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/TypeRegistry.cs" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Evaluator.TypeRegistry.GeneratedContextTypeCount">
      <topicdata group="api" />
      <apidata name="GeneratedContextTypeCount" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <sourceContext file="Gemstone.Expressions/Evaluator/TypeRegistry.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_GeneratedContextTypeCount" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.TypeRegistry.GetContextType``2">
      <topicdata group="api" />
      <apidata name="GetContextType" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.GetContextType" />
      <sourceContext file="Gemstone.Expressions/Evaluator/TypeRegistry.cs" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TResult" />
        <template name="TInstanceParameter" />
      </templates>
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.TypeRegistry.GetContextType(System.Type,System.Type)">
      <topicdata group="api" />
      <apidata name="GetContextType" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.GetContextType" />
      <sourceContext file="Gemstone.Expressions/Evaluator/TypeRegistry.cs" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="resultType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="instanceParameterType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.TypeRegistry.GetNewContext``2">
      <topicdata group="api" />
      <apidata name="GetNewContext" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.GetNewContext" />
      <sourceContext file="Gemstone.Expressions/Evaluator/TypeRegistry.cs" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TResult" />
        <template name="TInstanceParameter" />
      </templates>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.TypeRegistry.GetNewContext(System.Type,System.Type)">
      <topicdata group="api" />
      <apidata name="GetNewContext" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.GetNewContext" />
      <sourceContext file="Gemstone.Expressions/Evaluator/TypeRegistry.cs" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="resultType">
          <type api="T:System.Type" ref="true" />
        </parameter>
        <parameter name="instanceParameterType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Evaluator.TypeRegistry.Item(System.String)">
      <topicdata group="api" />
      <apidata name="Item" group="member" subgroup="property" />
      <memberdata visibility="public" overload="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.Item" />
      <sourceContext file="Gemstone.Expressions/Evaluator/TypeRegistry.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Item" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Evaluator.TypeRegistry.Item(System.String,System.Type)">
      <topicdata group="api" />
      <apidata name="Item" group="member" subgroup="property" />
      <memberdata visibility="public" overload="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.Item" />
      <sourceContext file="Gemstone.Expressions/Evaluator/TypeRegistry.cs" />
      <proceduredata virtual="false" />
      <propertydata set="true" />
      <setter name="set_Item" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Evaluator.TypeRegistry.Namespaces">
      <topicdata group="api" />
      <apidata name="Namespaces" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/TypeRegistry.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Namespaces" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Evaluator.TypeRegistry.RegisteredSymbols">
      <topicdata group="api" />
      <apidata name="RegisteredSymbols" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/TypeRegistry.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RegisteredSymbols" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:Gemstone.Expressions.Evaluator.Symbol" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Evaluator.TypeRegistry.RegisteredTypes">
      <topicdata group="api" />
      <apidata name="RegisteredTypes" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Evaluator/TypeRegistry.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_RegisteredTypes" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Type" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterSymbol(Gemstone.Expressions.Evaluator.Symbol)">
      <topicdata group="api" />
      <apidata name="RegisterSymbol" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterSymbol" />
      <sourceContext file="Gemstone.Expressions/Evaluator/TypeRegistry.cs" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="symbol">
          <type api="T:Gemstone.Expressions.Evaluator.Symbol" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterSymbol``1(System.String,``0)">
      <topicdata group="api" />
      <apidata name="RegisterSymbol" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterSymbol" />
      <sourceContext file="Gemstone.Expressions/Evaluator/TypeRegistry.cs" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="value">
          <template name="T" index="0" api="M:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterSymbol``1(System.String,``0)" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterType``1">
      <topicdata group="api" />
      <apidata name="RegisterType" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterType" />
      <sourceContext file="Gemstone.Expressions/Evaluator/TypeRegistry.cs" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterType(System.Type)">
      <topicdata group="api" />
      <apidata name="RegisterType" group="member" subgroup="method" />
      <memberdata visibility="public" overload="Overload:Gemstone.Expressions.Evaluator.TypeRegistry.RegisterType" />
      <sourceContext file="Gemstone.Expressions/Evaluator/TypeRegistry.cs" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Evaluator" />
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </containers>
    </api>
    <api id="N:Gemstone.Expressions.Model">
      <topicdata group="api" />
      <apidata name="Gemstone.Expressions.Model" group="namespace" />
      <elements>
        <element api="T:Gemstone.Expressions.Model.DefaultValueExpressionAttribute" />
        <element api="T:Gemstone.Expressions.Model.EvaluationOrderException" />
        <element api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" />
        <element api="T:Gemstone.Expressions.Model.IValueExpressionScope`1" />
        <element api="T:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute" />
        <element api="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" />
        <element api="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" />
        <element api="T:Gemstone.Expressions.Model.ValueExpressionParser" />
        <element api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
        <element api="T:Gemstone.Expressions.Model.ValueExpressionScopeBase`1" />
      </elements>
    </api>
    <api id="T:Gemstone.Expressions.Model.DefaultValueExpressionAttribute">
      <topicdata group="api" />
      <apidata name="DefaultValueExpressionAttribute" group="type" subgroup="class" />
      <sourceContext file="Gemstone.Expressions/Model/DefaultValueExpressionAttribute.cs" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" ref="true" />
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.Equals(System.Object)">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.GetHashCode">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.IsDefaultAttribute">
          <apidata name="IsDefaultAttribute" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.Match(System.Object)">
          <apidata name="Match" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="P:System.Attribute.TypeId">
          <apidata name="TypeId" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_TypeId" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.Model.DefaultValueExpressionAttribute.#ctor(System.String)" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.Cached" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.EvaluationOrder" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.Expression" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionAttributeBase.GetExpressionUpdateValue(System.Reflection.PropertyInfo)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionAttributeBase.GetPropertyUpdateValue(System.Reflection.PropertyInfo)" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.TypeRegistry" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Property" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:Gemstone.Expressions.Model.DefaultValueExpressionAttribute">
      <topicdata name="DefaultValueExpressionAttribute" group="list" subgroup="Methods" typeTopicId="T:Gemstone.Expressions.Model.DefaultValueExpressionAttribute" />
      <apidata name="DefaultValueExpressionAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.Equals(System.Object)">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.GetHashCode">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.IsDefaultAttribute">
          <apidata name="IsDefaultAttribute" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.Match(System.Object)">
          <apidata name="Match" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionAttributeBase.GetExpressionUpdateValue(System.Reflection.PropertyInfo)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionAttributeBase.GetPropertyUpdateValue(System.Reflection.PropertyInfo)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.DefaultValueExpressionAttribute" />
      </containers>
    </api>
    <api id="Properties.T:Gemstone.Expressions.Model.DefaultValueExpressionAttribute">
      <topicdata name="DefaultValueExpressionAttribute" group="list" subgroup="Properties" typeTopicId="T:Gemstone.Expressions.Model.DefaultValueExpressionAttribute" />
      <apidata name="DefaultValueExpressionAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Attribute.TypeId">
          <apidata name="TypeId" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_TypeId" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.Cached" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.EvaluationOrder" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.Expression" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.TypeRegistry" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.DefaultValueExpressionAttribute" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.DefaultValueExpressionAttribute.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <sourceContext file="Gemstone.Expressions/Model/DefaultValueExpressionAttribute.cs" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.DefaultValueExpressionAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:Gemstone.Expressions.Model.EvaluationOrderException">
      <topicdata group="api" />
      <apidata name="EvaluationOrderException" group="type" subgroup="class" />
      <sourceContext file="Gemstone.Expressions/Model/EvaluationOrderException.cs" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Exception.GetBaseException">
          <apidata name="GetBaseException" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Exception" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <apidata name="GetObjectData" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="info">
              <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
            </parameter>
            <parameter name="context">
              <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
            </parameter>
          </parameters>
          <implements>
            <member api="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
              <type api="T:System.Runtime.Serialization.ISerializable" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="M:System.Exception.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="M:System.Exception.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.ToString">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.Data">
          <apidata name="Data" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_Data" />
          <returns>
            <type api="T:System.Collections.IDictionary" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.HelpLink">
          <apidata name="HelpLink" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" set="true" />
          <getter name="get_HelpLink" />
          <setter name="set_HelpLink" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.HResult">
          <apidata name="HResult" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" set-visibility="family" />
          <getter name="get_HResult" />
          <setter name="set_HResult" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.InnerException">
          <apidata name="InnerException" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_InnerException" />
          <returns>
            <type api="T:System.Exception" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.Message">
          <apidata name="Message" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_Message" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.Source">
          <apidata name="Source" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Source" />
          <setter name="set_Source" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.StackTrace">
          <apidata name="StackTrace" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_StackTrace" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.TargetSite">
          <apidata name="TargetSite" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_TargetSite" />
          <returns>
            <type api="T:System.Reflection.MethodBase" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="E:System.Exception.SerializeObjectState">
          <apidata name="SerializeObjectState" group="member" subgroup="event" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <eventdata add="true" remove="true" />
          <adder name="add_SerializeObjectState" />
          <remover name="remove_SerializeObjectState" />
          <eventhandler>
            <type api="T:System.EventHandler`1" ref="true">
              <specialization>
                <type api="T:System.Runtime.Serialization.SafeSerializationEventArgs" ref="true" />
              </specialization>
            </type>
          </eventhandler>
          <eventargs>
            <type api="T:System.Runtime.Serialization.SafeSerializationEventArgs" ref="true" />
          </eventargs>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.Model.EvaluationOrderException.#ctor(System.String)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
      </containers>
    </api>
    <api id="Methods.T:Gemstone.Expressions.Model.EvaluationOrderException">
      <topicdata name="EvaluationOrderException" group="list" subgroup="Methods" typeTopicId="T:Gemstone.Expressions.Model.EvaluationOrderException" />
      <apidata name="EvaluationOrderException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="M:System.Exception.GetBaseException">
          <apidata name="GetBaseException" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Exception" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <apidata name="GetObjectData" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="info">
              <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
            </parameter>
            <parameter name="context">
              <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
            </parameter>
          </parameters>
          <implements>
            <member api="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
              <type api="T:System.Runtime.Serialization.ISerializable" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="M:System.Exception.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="M:System.Exception.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.ToString">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.EvaluationOrderException" />
      </containers>
    </api>
    <api id="Properties.T:Gemstone.Expressions.Model.EvaluationOrderException">
      <topicdata name="EvaluationOrderException" group="list" subgroup="Properties" typeTopicId="T:Gemstone.Expressions.Model.EvaluationOrderException" />
      <apidata name="EvaluationOrderException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:System.Exception.Data">
          <apidata name="Data" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_Data" />
          <returns>
            <type api="T:System.Collections.IDictionary" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.HelpLink">
          <apidata name="HelpLink" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" set="true" />
          <getter name="get_HelpLink" />
          <setter name="set_HelpLink" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.HResult">
          <apidata name="HResult" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" set="true" set-visibility="family" />
          <getter name="get_HResult" />
          <setter name="set_HResult" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.InnerException">
          <apidata name="InnerException" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_InnerException" />
          <returns>
            <type api="T:System.Exception" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.Message">
          <apidata name="Message" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_Message" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.Source">
          <apidata name="Source" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Source" />
          <setter name="set_Source" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.StackTrace">
          <apidata name="StackTrace" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_StackTrace" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.TargetSite">
          <apidata name="TargetSite" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_TargetSite" />
          <returns>
            <type api="T:System.Reflection.MethodBase" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.EvaluationOrderException" />
      </containers>
    </api>
    <api id="Events.T:Gemstone.Expressions.Model.EvaluationOrderException">
      <topicdata name="EvaluationOrderException" group="list" subgroup="Events" typeTopicId="T:Gemstone.Expressions.Model.EvaluationOrderException" />
      <apidata name="EvaluationOrderException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="E:System.Exception.SerializeObjectState">
          <apidata name="SerializeObjectState" group="member" subgroup="event" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <eventdata add="true" remove="true" />
          <adder name="add_SerializeObjectState" />
          <remover name="remove_SerializeObjectState" />
          <eventhandler>
            <type api="T:System.EventHandler`1" ref="true">
              <specialization>
                <type api="T:System.Runtime.Serialization.SafeSerializationEventArgs" ref="true" />
              </specialization>
            </type>
          </eventhandler>
          <eventargs>
            <type api="T:System.Runtime.Serialization.SafeSerializationEventArgs" ref="true" />
          </eventargs>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.EvaluationOrderException" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.EvaluationOrderException.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <sourceContext file="Gemstone.Expressions/Model/EvaluationOrderException.cs" />
      <parameters>
        <parameter name="message">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.EvaluationOrderException" ref="true" />
      </containers>
    </api>
    <api id="T:Gemstone.Expressions.Model.IValueExpressionAttribute">
      <topicdata group="api" />
      <apidata name="IValueExpressionAttribute" group="type" subgroup="interface" />
      <sourceContext file="Gemstone.Expressions/Model/IValueExpressionAttribute.cs" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" ref="true" />
      </implementors>
      <elements>
        <element api="P:Gemstone.Expressions.Model.IValueExpressionAttribute.Cached" />
        <element api="P:Gemstone.Expressions.Model.IValueExpressionAttribute.EvaluationOrder" />
        <element api="P:Gemstone.Expressions.Model.IValueExpressionAttribute.Expression" />
        <element api="M:Gemstone.Expressions.Model.IValueExpressionAttribute.GetExpressionUpdateValue(System.Reflection.PropertyInfo)" />
        <element api="M:Gemstone.Expressions.Model.IValueExpressionAttribute.GetPropertyUpdateValue(System.Reflection.PropertyInfo)" />
        <element api="P:Gemstone.Expressions.Model.IValueExpressionAttribute.TypeRegistry" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
      </containers>
    </api>
    <api id="Methods.T:Gemstone.Expressions.Model.IValueExpressionAttribute">
      <topicdata name="IValueExpressionAttribute" group="list" subgroup="Methods" typeTopicId="T:Gemstone.Expressions.Model.IValueExpressionAttribute" />
      <apidata name="IValueExpressionAttribute" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:Gemstone.Expressions.Model.IValueExpressionAttribute.GetExpressionUpdateValue(System.Reflection.PropertyInfo)" />
        <element api="M:Gemstone.Expressions.Model.IValueExpressionAttribute.GetPropertyUpdateValue(System.Reflection.PropertyInfo)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" />
      </containers>
    </api>
    <api id="Properties.T:Gemstone.Expressions.Model.IValueExpressionAttribute">
      <topicdata name="IValueExpressionAttribute" group="list" subgroup="Properties" typeTopicId="T:Gemstone.Expressions.Model.IValueExpressionAttribute" />
      <apidata name="IValueExpressionAttribute" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:Gemstone.Expressions.Model.IValueExpressionAttribute.Cached" />
        <element api="P:Gemstone.Expressions.Model.IValueExpressionAttribute.EvaluationOrder" />
        <element api="P:Gemstone.Expressions.Model.IValueExpressionAttribute.Expression" />
        <element api="P:Gemstone.Expressions.Model.IValueExpressionAttribute.TypeRegistry" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Model.IValueExpressionAttribute.Cached">
      <topicdata group="api" />
      <apidata name="Cached" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Model/IValueExpressionAttribute.cs" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Cached" />
      <setter name="set_Cached" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Model.IValueExpressionAttribute.EvaluationOrder">
      <topicdata group="api" />
      <apidata name="EvaluationOrder" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Model/IValueExpressionAttribute.cs" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_EvaluationOrder" />
      <setter name="set_EvaluationOrder" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Model.IValueExpressionAttribute.Expression">
      <topicdata group="api" />
      <apidata name="Expression" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Model/IValueExpressionAttribute.cs" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_Expression" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.IValueExpressionAttribute.GetExpressionUpdateValue(System.Reflection.PropertyInfo)">
      <topicdata group="api" />
      <apidata name="GetExpressionUpdateValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Model/IValueExpressionAttribute.cs" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="property">
          <type api="T:System.Reflection.PropertyInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.IValueExpressionAttribute.GetPropertyUpdateValue(System.Reflection.PropertyInfo)">
      <topicdata group="api" />
      <apidata name="GetPropertyUpdateValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Model/IValueExpressionAttribute.cs" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="property">
          <type api="T:System.Reflection.PropertyInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Model.IValueExpressionAttribute.TypeRegistry">
      <topicdata group="api" />
      <apidata name="TypeRegistry" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Model/IValueExpressionAttribute.cs" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_TypeRegistry" />
      <setter name="set_TypeRegistry" />
      <returns>
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:Gemstone.Expressions.Model.IValueExpressionScope`1">
      <topicdata group="api" />
      <apidata name="IValueExpressionScope" group="type" subgroup="interface" />
      <sourceContext file="Gemstone.Expressions/Model/IValueExpressionScope.cs" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <implementors>
        <type api="T:Gemstone.Expressions.Model.ValueExpressionScopeBase`1" ref="true" />
      </implementors>
      <elements>
        <element api="P:Gemstone.Expressions.Model.IValueExpressionScope`1.Instance" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
      </containers>
    </api>
    <api id="Properties.T:Gemstone.Expressions.Model.IValueExpressionScope`1">
      <topicdata name="IValueExpressionScope" group="list" subgroup="Properties" typeTopicId="T:Gemstone.Expressions.Model.IValueExpressionScope`1" />
      <apidata name="IValueExpressionScope" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="P:Gemstone.Expressions.Model.IValueExpressionScope`1.Instance" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.IValueExpressionScope`1" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Model.IValueExpressionScope`1.Instance">
      <topicdata group="api" />
      <apidata name="Instance" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Model/IValueExpressionScope.cs" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Instance" />
      <setter name="set_Instance" />
      <returns>
        <template name="T" index="0" api="T:Gemstone.Expressions.Model.IValueExpressionScope`1" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.IValueExpressionScope`1" ref="true" />
      </containers>
    </api>
    <api id="T:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute">
      <topicdata group="api" />
      <apidata name="TypeConvertedValueExpressionAttribute" group="type" subgroup="class" />
      <sourceContext file="Gemstone.Expressions/Model/TypeConvertedValueExpressionAttribute.cs" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" ref="true" />
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.Equals(System.Object)">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.GetHashCode">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.IsDefaultAttribute">
          <apidata name="IsDefaultAttribute" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.Match(System.Object)">
          <apidata name="Match" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="P:System.Attribute.TypeId">
          <apidata name="TypeId" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_TypeId" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute.#ctor(System.String,System.Type)" />
        <element api="M:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute.GetExpressionUpdateValue(System.Reflection.PropertyInfo)" />
        <element api="M:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute.GetPropertyUpdateValue(System.Reflection.PropertyInfo)" />
        <element api="P:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute.ReturnType" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.Cached" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.EvaluationOrder" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.Expression" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.TypeRegistry" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Property" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute">
      <topicdata name="TypeConvertedValueExpressionAttribute" group="list" subgroup="Methods" typeTopicId="T:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute" />
      <apidata name="TypeConvertedValueExpressionAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.Equals(System.Object)">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.GetHashCode">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.IsDefaultAttribute">
          <apidata name="IsDefaultAttribute" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.Match(System.Object)">
          <apidata name="Match" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute.GetExpressionUpdateValue(System.Reflection.PropertyInfo)" />
        <element api="M:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute.GetPropertyUpdateValue(System.Reflection.PropertyInfo)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute" />
      </containers>
    </api>
    <api id="Properties.T:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute">
      <topicdata name="TypeConvertedValueExpressionAttribute" group="list" subgroup="Properties" typeTopicId="T:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute" />
      <apidata name="TypeConvertedValueExpressionAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Attribute.TypeId">
          <apidata name="TypeId" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_TypeId" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="P:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute.ReturnType" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.Cached" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.EvaluationOrder" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.Expression" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.TypeRegistry" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute.#ctor(System.String,System.Type)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <sourceContext file="Gemstone.Expressions/Model/TypeConvertedValueExpressionAttribute.cs" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="returnType" optional="true">
          <type api="T:System.Type" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute.GetExpressionUpdateValue(System.Reflection.PropertyInfo)">
      <topicdata group="api" />
      <apidata name="GetExpressionUpdateValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Model/TypeConvertedValueExpressionAttribute.cs" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Gemstone.Expressions.Model.ValueExpressionAttributeBase.GetExpressionUpdateValue(System.Reflection.PropertyInfo)">
          <type api="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="property">
          <type api="T:System.Reflection.PropertyInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:Gemstone.Expressions.Model.IValueExpressionAttribute.GetExpressionUpdateValue(System.Reflection.PropertyInfo)">
          <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute.GetPropertyUpdateValue(System.Reflection.PropertyInfo)">
      <topicdata group="api" />
      <apidata name="GetPropertyUpdateValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Model/TypeConvertedValueExpressionAttribute.cs" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Gemstone.Expressions.Model.ValueExpressionAttributeBase.GetPropertyUpdateValue(System.Reflection.PropertyInfo)">
          <type api="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="property">
          <type api="T:System.Reflection.PropertyInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:Gemstone.Expressions.Model.IValueExpressionAttribute.GetPropertyUpdateValue(System.Reflection.PropertyInfo)">
          <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute.ReturnType">
      <topicdata group="api" />
      <apidata name="ReturnType" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Model/TypeConvertedValueExpressionAttribute.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_ReturnType" />
      <returns>
        <type api="T:System.Type" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute">
      <topicdata group="api" />
      <apidata name="UpdateValueExpressionAttribute" group="type" subgroup="class" />
      <sourceContext file="Gemstone.Expressions/Model/UpdateValueExpressionAttribute.cs" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" ref="true" />
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.Equals(System.Object)">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.GetHashCode">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.IsDefaultAttribute">
          <apidata name="IsDefaultAttribute" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.Match(System.Object)">
          <apidata name="Match" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="P:System.Attribute.TypeId">
          <apidata name="TypeId" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_TypeId" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.Model.UpdateValueExpressionAttribute.#ctor(System.String)" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.Cached" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.EvaluationOrder" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.Expression" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionAttributeBase.GetExpressionUpdateValue(System.Reflection.PropertyInfo)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionAttributeBase.GetPropertyUpdateValue(System.Reflection.PropertyInfo)" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.TypeRegistry" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Property" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute">
      <topicdata name="UpdateValueExpressionAttribute" group="list" subgroup="Methods" typeTopicId="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" />
      <apidata name="UpdateValueExpressionAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.Equals(System.Object)">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.GetHashCode">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.IsDefaultAttribute">
          <apidata name="IsDefaultAttribute" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.Match(System.Object)">
          <apidata name="Match" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionAttributeBase.GetExpressionUpdateValue(System.Reflection.PropertyInfo)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionAttributeBase.GetPropertyUpdateValue(System.Reflection.PropertyInfo)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" />
      </containers>
    </api>
    <api id="Properties.T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute">
      <topicdata name="UpdateValueExpressionAttribute" group="list" subgroup="Properties" typeTopicId="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" />
      <apidata name="UpdateValueExpressionAttribute" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="P:System.Attribute.TypeId">
          <apidata name="TypeId" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_TypeId" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.Cached" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.EvaluationOrder" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.Expression" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.TypeRegistry" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.UpdateValueExpressionAttribute.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <sourceContext file="Gemstone.Expressions/Model/UpdateValueExpressionAttribute.cs" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" ref="true" />
      </containers>
    </api>
    <api id="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase">
      <topicdata group="api" />
      <apidata name="ValueExpressionAttributeBase" group="type" subgroup="class" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionAttributeBase.cs" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Gemstone.Expressions.Model.DefaultValueExpressionAttribute" ref="true" />
          <type api="T:Gemstone.Expressions.Model.TypeConvertedValueExpressionAttribute" ref="true" />
          <type api="T:Gemstone.Expressions.Model.UpdateValueExpressionAttribute" ref="true" />
        </descendents>
      </family>
      <implements>
        <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
      </implements>
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.Equals(System.Object)">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.GetHashCode">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.IsDefaultAttribute">
          <apidata name="IsDefaultAttribute" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.Match(System.Object)">
          <apidata name="Match" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="P:System.Attribute.TypeId">
          <apidata name="TypeId" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_TypeId" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionAttributeBase.#ctor(System.String)" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.Cached" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.EvaluationOrder" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.Expression" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionAttributeBase.GetExpressionUpdateValue(System.Reflection.PropertyInfo)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionAttributeBase.GetPropertyUpdateValue(System.Reflection.PropertyInfo)" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.TypeRegistry" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.AttributeUsageAttribute" ref="true" />
          <argument>
            <type api="T:System.AttributeTargets" ref="false" />
            <enumValue>
              <field name="Property" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="Methods.T:Gemstone.Expressions.Model.ValueExpressionAttributeBase">
      <topicdata name="ValueExpressionAttributeBase" group="list" subgroup="Methods" typeTopicId="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" />
      <apidata name="ValueExpressionAttributeBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:System.Attribute.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.Equals(System.Object)">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.GetHashCode">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.IsDefaultAttribute">
          <apidata name="IsDefaultAttribute" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Attribute.Match(System.Object)">
          <apidata name="Match" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionAttributeBase.GetExpressionUpdateValue(System.Reflection.PropertyInfo)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionAttributeBase.GetPropertyUpdateValue(System.Reflection.PropertyInfo)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" />
      </containers>
    </api>
    <api id="Properties.T:Gemstone.Expressions.Model.ValueExpressionAttributeBase">
      <topicdata name="ValueExpressionAttributeBase" group="list" subgroup="Properties" typeTopicId="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" />
      <apidata name="ValueExpressionAttributeBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:System.Attribute.TypeId">
          <apidata name="TypeId" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_TypeId" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Attribute" ref="true" />
          </containers>
        </element>
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.Cached" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.EvaluationOrder" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.Expression" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.TypeRegistry" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionAttributeBase.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionAttributeBase.cs" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.Cached">
      <topicdata group="api" />
      <apidata name="Cached" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionAttributeBase.cs" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Cached" />
      <setter name="set_Cached" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:Gemstone.Expressions.Model.IValueExpressionAttribute.Cached">
          <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.EvaluationOrder">
      <topicdata group="api" />
      <apidata name="EvaluationOrder" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionAttributeBase.cs" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_EvaluationOrder" />
      <setter name="set_EvaluationOrder" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="P:Gemstone.Expressions.Model.IValueExpressionAttribute.EvaluationOrder">
          <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.Expression">
      <topicdata group="api" />
      <apidata name="Expression" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionAttributeBase.cs" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_Expression" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="P:Gemstone.Expressions.Model.IValueExpressionAttribute.Expression">
          <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionAttributeBase.GetExpressionUpdateValue(System.Reflection.PropertyInfo)">
      <topicdata group="api" />
      <apidata name="GetExpressionUpdateValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionAttributeBase.cs" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="property">
          <type api="T:System.Reflection.PropertyInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:Gemstone.Expressions.Model.IValueExpressionAttribute.GetExpressionUpdateValue(System.Reflection.PropertyInfo)">
          <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionAttributeBase.GetPropertyUpdateValue(System.Reflection.PropertyInfo)">
      <topicdata group="api" />
      <apidata name="GetPropertyUpdateValue" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionAttributeBase.cs" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="property">
          <type api="T:System.Reflection.PropertyInfo" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <implements>
        <member api="M:Gemstone.Expressions.Model.IValueExpressionAttribute.GetPropertyUpdateValue(System.Reflection.PropertyInfo)">
          <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Model.ValueExpressionAttributeBase.TypeRegistry">
      <topicdata group="api" />
      <apidata name="TypeRegistry" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionAttributeBase.cs" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_TypeRegistry" />
      <setter name="set_TypeRegistry" />
      <returns>
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </returns>
      <implements>
        <member api="P:Gemstone.Expressions.Model.IValueExpressionAttribute.TypeRegistry">
          <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionAttributeBase" ref="true" />
      </containers>
    </api>
    <api id="T:Gemstone.Expressions.Model.ValueExpressionParser">
      <topicdata group="api" />
      <apidata name="ValueExpressionParser" group="type" subgroup="class" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
            </specialization>
          </type>
          <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
            </specialization>
          </type>
          <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" ref="true">
            <specialization>
              <type api="T:System.Object" ref="true" />
              <type api="T:System.Object" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.CompiledAction" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.CompiledFunction" />
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser.ExecuteAction">
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteAction" />
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteAction(`1)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser.ExecuteFunction">
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteFunction" />
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteFunction(`1)" />
        </element>
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Compile(System.Boolean)" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.CompiledExpression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Expression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.InstanceParameterType" />
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ToString" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.TypeRegistry" />
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser.#ctor">
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser.#ctor(System.String)" />
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser.#ctor(Gemstone.Expressions.Model.IValueExpressionAttribute,System.Reflection.PropertyInfo)" />
        </element>
        <element api="P:Gemstone.Expressions.Model.ValueExpressionParser.DefaultTypeRegistry" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser.DeriveExpression(System.String,Gemstone.Expressions.Model.IValueExpressionAttribute,System.Reflection.MemberInfo,System.String)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser.HasThisKeywords(System.String)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser.ReplaceThisKeywords(System.String,System.String)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.Parse(System.Linq.Expressions.ParameterExpression,Gemstone.Expressions.Evaluator.TypeRegistry,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
      </containers>
    </api>
    <api id="Methods.T:Gemstone.Expressions.Model.ValueExpressionParser">
      <topicdata name="ValueExpressionParser" group="list" subgroup="Methods" typeTopicId="T:Gemstone.Expressions.Model.ValueExpressionParser" />
      <apidata name="ValueExpressionParser" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser.ExecuteAction">
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteAction" />
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteAction(`1)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser.ExecuteFunction">
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteFunction" />
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteFunction(`1)" />
        </element>
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Compile(System.Boolean)" />
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ToString" />
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser.DeriveExpression(System.String,Gemstone.Expressions.Model.IValueExpressionAttribute,System.Reflection.MemberInfo,System.String)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser.HasThisKeywords(System.String)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser.ReplaceThisKeywords(System.String,System.String)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.Parse(System.Linq.Expressions.ParameterExpression,Gemstone.Expressions.Evaluator.TypeRegistry,System.Boolean)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser" />
      </containers>
    </api>
    <api id="Properties.T:Gemstone.Expressions.Model.ValueExpressionParser">
      <topicdata name="ValueExpressionParser" group="list" subgroup="Properties" typeTopicId="T:Gemstone.Expressions.Model.ValueExpressionParser" />
      <apidata name="ValueExpressionParser" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <elements>
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.CompiledAction" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.CompiledFunction" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.CompiledExpression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Expression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.InstanceParameterType" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.TypeRegistry" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionParser.DefaultTypeRegistry" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser" />
      </containers>
    </api>
    <api id="Overload:Gemstone.Expressions.Model.ValueExpressionParser.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" allMembersTopicId="" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser.#ctor(System.String)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser.#ctor(Gemstone.Expressions.Model.IValueExpressionAttribute,System.Reflection.PropertyInfo)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser.#ctor(Gemstone.Expressions.Model.IValueExpressionAttribute,System.Reflection.PropertyInfo)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser.#ctor" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <parameters>
        <parameter name="valueExpressionAttribute">
          <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
        </parameter>
        <parameter name="property">
          <type api="T:System.Reflection.PropertyInfo" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser.#ctor" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Model.ValueExpressionParser.DefaultTypeRegistry">
      <topicdata group="api" />
      <apidata name="DefaultTypeRegistry" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DefaultTypeRegistry" />
      <returns>
        <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser.DeriveExpression(System.String,Gemstone.Expressions.Model.IValueExpressionAttribute,System.Reflection.MemberInfo,System.String)">
      <topicdata group="api" />
      <apidata name="DeriveExpression" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="valueExpressionAttribute">
          <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
        </parameter>
        <parameter name="member">
          <type api="T:System.Reflection.MemberInfo" ref="true" />
        </parameter>
        <parameter name="typeName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser.HasThisKeywords(System.String)">
      <topicdata group="api" />
      <apidata name="HasThisKeywords" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser.ReplaceThisKeywords(System.String,System.String)">
      <topicdata group="api" />
      <apidata name="ReplaceThisKeywords" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="fieldName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser" ref="true" />
      </containers>
    </api>
    <api id="T:Gemstone.Expressions.Model.ValueExpressionParser`1">
      <topicdata group="api" />
      <apidata name="ValueExpressionParser" group="type" subgroup="class" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
            </specialization>
          </type>
          <type api="T:Gemstone.Expressions.Evaluator.ExpressionCompiler`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
              <type api="T:System.Object" ref="true" />
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Gemstone.Expressions.Model.ValueExpressionParser" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.CompiledAction" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.CompiledFunction" />
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.ExecuteAction">
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteAction" />
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteAction(`1)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.ExecuteFunction">
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteFunction" />
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteFunction(`1)" />
        </element>
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Compile(System.Boolean)" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.CompiledExpression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Expression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.InstanceParameterType" />
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ToString" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.TypeRegistry" />
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.#ctor">
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.#ctor(System.String)" />
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.#ctor(Gemstone.Expressions.Model.IValueExpressionAttribute,System.Reflection.PropertyInfo)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaults">
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaults(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaults``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaultsForType">
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaultsForType``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaultsForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstance">
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstance(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstance``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstanceForType">
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstanceForType``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstanceForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        </element>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.InitializeType" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.Parse(System.Linq.Expressions.ParameterExpression,Gemstone.Expressions.Evaluator.TypeRegistry,System.Boolean)" />
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressions">
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressions(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressions``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressionsForType">
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressionsForType``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressionsForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstance">
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstance(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstance``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstanceForType">
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstanceForType``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstanceForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        </element>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateProperties(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
      </containers>
    </api>
    <api id="Methods.T:Gemstone.Expressions.Model.ValueExpressionParser`1">
      <topicdata name="ValueExpressionParser" group="list" subgroup="Methods" typeTopicId="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
      <apidata name="ValueExpressionParser" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.ExecuteAction">
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteAction" />
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteAction(`1)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.ExecuteFunction">
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.ExecuteFunction" />
          <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ExecuteFunction(`1)" />
        </element>
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Compile(System.Boolean)" />
        <element api="M:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.ToString" />
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaults">
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaults(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaults``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaultsForType">
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaultsForType``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaultsForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstance">
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstance(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstance``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstanceForType">
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstanceForType``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstanceForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        </element>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.InitializeType" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.Parse(System.Linq.Expressions.ParameterExpression,Gemstone.Expressions.Evaluator.TypeRegistry,System.Boolean)" />
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressions">
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressions(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressions``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressionsForType">
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressionsForType``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressionsForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstance">
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstance(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstance``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        </element>
        <element api="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstanceForType">
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstanceForType``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstanceForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        </element>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateProperties(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
      </containers>
    </api>
    <api id="Properties.T:Gemstone.Expressions.Model.ValueExpressionParser`1">
      <topicdata name="ValueExpressionParser" group="list" subgroup="Properties" typeTopicId="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
      <apidata name="ValueExpressionParser" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.CompiledAction" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`1.CompiledFunction" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.CompiledExpression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.Expression" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.InstanceParameterType" />
        <element api="P:Gemstone.Expressions.Evaluator.ExpressionCompiler`2.TypeRegistry" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
      </containers>
    </api>
    <api id="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.#ctor">
      <topicdata name=".ctor" group="list" subgroup="overload" memberSubgroup="constructor" pseudo="true" allMembersTopicId="" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <elements>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.#ctor(System.String)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.#ctor(Gemstone.Expressions.Model.IValueExpressionAttribute,System.Reflection.PropertyInfo)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaults">
      <topicdata name="ApplyDefaults" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="ApplyDefaults" group="member" subgroup="method" />
      <elements>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaults(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaults``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaultsForType">
      <topicdata name="ApplyDefaultsForType" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="ApplyDefaultsForType" group="member" subgroup="method" />
      <elements>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaultsForType``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaultsForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstance">
      <topicdata name="CreateInstance" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="CreateInstance" group="member" subgroup="method" />
      <elements>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstance(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstance``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstanceForType">
      <topicdata name="CreateInstanceForType" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="CreateInstanceForType" group="member" subgroup="method" />
      <elements>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstanceForType``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstanceForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressions">
      <topicdata name="UpdateExpressions" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="UpdateExpressions" group="member" subgroup="method" />
      <elements>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressions(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressions``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressionsForType">
      <topicdata name="UpdateExpressionsForType" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="UpdateExpressionsForType" group="member" subgroup="method" />
      <elements>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressionsForType``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressionsForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstance">
      <topicdata name="UpdateInstance" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="UpdateInstance" group="member" subgroup="method" />
      <elements>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstance(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstance``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstanceForType">
      <topicdata name="UpdateInstanceForType" group="list" subgroup="overload" memberSubgroup="method" pseudo="true" allMembersTopicId="" />
      <apidata name="UpdateInstanceForType" group="member" subgroup="method" />
      <elements>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstanceForType``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
        <element api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstanceForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.#ctor(Gemstone.Expressions.Model.IValueExpressionAttribute,System.Reflection.PropertyInfo)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.#ctor" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <parameters>
        <parameter name="valueExpressionAttribute">
          <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
        </parameter>
        <parameter name="property">
          <type api="T:System.Reflection.PropertyInfo" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.#ctor(System.String)">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.#ctor" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <parameters>
        <parameter name="expression">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaults(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)">
      <topicdata group="api" />
      <apidata name="ApplyDefaults" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaults" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="properties" optional="true">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.PropertyInfo" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="typeRegistry" optional="true">
          <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Action`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaults``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)">
      <topicdata group="api" />
      <apidata name="ApplyDefaults" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaults" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TExpressionScope">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:Gemstone.Expressions.Model.IValueExpressionScope`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="properties" optional="true">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.PropertyInfo" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="typeRegistry" optional="true">
          <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Action`1" ref="true">
          <specialization>
            <template name="TExpressionScope" index="0" api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaults``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaultsForType``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)">
      <topicdata group="api" />
      <apidata name="ApplyDefaultsForType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaultsForType" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TValueExpressionAttribute">
          <constrained>
            <type api="T:System.Attribute" ref="true" />
            <implements>
              <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="properties" optional="true">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.PropertyInfo" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="typeRegistry" optional="true">
          <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Action`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaultsForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)">
      <topicdata group="api" />
      <apidata name="ApplyDefaultsForType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaultsForType" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TValueExpressionAttribute">
          <constrained>
            <type api="T:System.Attribute" ref="true" />
            <implements>
              <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
            </implements>
          </constrained>
        </template>
        <template name="TExpressionScope">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:Gemstone.Expressions.Model.IValueExpressionScope`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="properties" optional="true">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.PropertyInfo" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="typeRegistry" optional="true">
          <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Action`1" ref="true">
          <specialization>
            <template name="TExpressionScope" index="1" api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.ApplyDefaultsForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstance(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)">
      <topicdata group="api" />
      <apidata name="CreateInstance" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstance" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="properties" optional="true">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.PropertyInfo" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="typeRegistry" optional="true">
          <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Func`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstance``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)">
      <topicdata group="api" />
      <apidata name="CreateInstance" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstance" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TExpressionScope">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:Gemstone.Expressions.Model.IValueExpressionScope`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="properties" optional="true">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.PropertyInfo" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="typeRegistry" optional="true">
          <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Func`2" ref="true">
          <specialization>
            <template name="TExpressionScope" index="0" api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstance``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
            <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstanceForType``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)">
      <topicdata group="api" />
      <apidata name="CreateInstanceForType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstanceForType" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TValueExpressionAttribute">
          <constrained>
            <type api="T:System.Attribute" ref="true" />
            <implements>
              <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="properties" optional="true">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.PropertyInfo" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="typeRegistry" optional="true">
          <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Func`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstanceForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)">
      <topicdata group="api" />
      <apidata name="CreateInstanceForType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstanceForType" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TValueExpressionAttribute">
          <constrained>
            <type api="T:System.Attribute" ref="true" />
            <implements>
              <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
            </implements>
          </constrained>
        </template>
        <template name="TExpressionScope">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:Gemstone.Expressions.Model.IValueExpressionScope`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="properties" optional="true">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.PropertyInfo" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="typeRegistry" optional="true">
          <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Func`2" ref="true">
          <specialization>
            <template name="TExpressionScope" index="1" api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.CreateInstanceForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
            <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.InitializeType">
      <topicdata group="api" />
      <apidata name="InitializeType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.Parse(System.Linq.Expressions.ParameterExpression,Gemstone.Expressions.Evaluator.TypeRegistry,System.Boolean)">
      <topicdata group="api" />
      <apidata name="Parse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="scope">
          <type api="T:System.Linq.Expressions.ParameterExpression" ref="true" />
        </parameter>
        <parameter name="typeRegistry" optional="true">
          <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="isCall" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressions(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)">
      <topicdata group="api" />
      <apidata name="UpdateExpressions" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressions" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="properties" optional="true">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.PropertyInfo" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="typeRegistry" optional="true">
          <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Action`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressions``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)">
      <topicdata group="api" />
      <apidata name="UpdateExpressions" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressions" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TExpressionScope">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:Gemstone.Expressions.Model.IValueExpressionScope`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="properties" optional="true">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.PropertyInfo" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="typeRegistry" optional="true">
          <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Action`1" ref="true">
          <specialization>
            <template name="TExpressionScope" index="0" api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressions``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressionsForType``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)">
      <topicdata group="api" />
      <apidata name="UpdateExpressionsForType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressionsForType" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TValueExpressionAttribute">
          <constrained>
            <type api="T:System.Attribute" ref="true" />
            <implements>
              <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="properties" optional="true">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.PropertyInfo" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="typeRegistry" optional="true">
          <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Action`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressionsForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)">
      <topicdata group="api" />
      <apidata name="UpdateExpressionsForType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressionsForType" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TValueExpressionAttribute">
          <constrained>
            <type api="T:System.Attribute" ref="true" />
            <implements>
              <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
            </implements>
          </constrained>
        </template>
        <template name="TExpressionScope">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:Gemstone.Expressions.Model.IValueExpressionScope`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="properties" optional="true">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.PropertyInfo" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="typeRegistry" optional="true">
          <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Action`1" ref="true">
          <specialization>
            <template name="TExpressionScope" index="1" api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateExpressionsForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstance(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)">
      <topicdata group="api" />
      <apidata name="UpdateInstance" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstance" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="properties" optional="true">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.PropertyInfo" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="typeRegistry" optional="true">
          <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Action`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstance``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)">
      <topicdata group="api" />
      <apidata name="UpdateInstance" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstance" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TExpressionScope">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:Gemstone.Expressions.Model.IValueExpressionScope`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="properties" optional="true">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.PropertyInfo" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="typeRegistry" optional="true">
          <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Action`1" ref="true">
          <specialization>
            <template name="TExpressionScope" index="0" api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstance``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstanceForType``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)">
      <topicdata group="api" />
      <apidata name="UpdateInstanceForType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstanceForType" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TValueExpressionAttribute">
          <constrained>
            <type api="T:System.Attribute" ref="true" />
            <implements>
              <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="properties" optional="true">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.PropertyInfo" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="typeRegistry" optional="true">
          <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Action`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstanceForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)">
      <topicdata group="api" />
      <apidata name="UpdateInstanceForType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" overload="Overload:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstanceForType" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TValueExpressionAttribute">
          <constrained>
            <type api="T:System.Attribute" ref="true" />
            <implements>
              <type api="T:Gemstone.Expressions.Model.IValueExpressionAttribute" ref="true" />
            </implements>
          </constrained>
        </template>
        <template name="TExpressionScope">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:Gemstone.Expressions.Model.IValueExpressionScope`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="properties" optional="true">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.PropertyInfo" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="typeRegistry" optional="true">
          <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Action`1" ref="true">
          <specialization>
            <template name="TExpressionScope" index="1" api="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateInstanceForType``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionParser`1.UpdateProperties(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Gemstone.Expressions.Evaluator.TypeRegistry)">
      <topicdata group="api" />
      <apidata name="UpdateProperties" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionParser.cs" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="properties" optional="true">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Reflection.PropertyInfo" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="typeRegistry" optional="true">
          <type api="T:Gemstone.Expressions.Evaluator.TypeRegistry" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Action`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionParser`1" ref="true" />
      </containers>
    </api>
    <api id="T:Gemstone.Expressions.Model.ValueExpressionScopeBase`1">
      <topicdata group="api" />
      <apidata name="ValueExpressionScopeBase" group="type" subgroup="class" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionScopeBase.cs" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <implements>
        <type api="T:Gemstone.Expressions.Model.IValueExpressionScope`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionScopeBase`1" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Gemstone.Expressions.Model.ValueExpressionScopeBase`1.#ctor" />
        <element api="P:Gemstone.Expressions.Model.ValueExpressionScopeBase`1.Instance" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
      </containers>
    </api>
    <api id="Methods.T:Gemstone.Expressions.Model.ValueExpressionScopeBase`1">
      <topicdata name="ValueExpressionScopeBase" group="list" subgroup="Methods" typeTopicId="T:Gemstone.Expressions.Model.ValueExpressionScopeBase`1" />
      <apidata name="ValueExpressionScopeBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Finalize">
          <apidata name="Finalize" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="true" />
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.MemberwiseClone">
          <apidata name="MemberwiseClone" group="member" subgroup="method" />
          <memberdata visibility="family" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Object" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="netstandard" module="netstandard" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionScopeBase`1" />
      </containers>
    </api>
    <api id="Properties.T:Gemstone.Expressions.Model.ValueExpressionScopeBase`1">
      <topicdata name="ValueExpressionScopeBase" group="list" subgroup="Properties" typeTopicId="T:Gemstone.Expressions.Model.ValueExpressionScopeBase`1" />
      <apidata name="ValueExpressionScopeBase" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <elements>
        <element api="P:Gemstone.Expressions.Model.ValueExpressionScopeBase`1.Instance" />
      </elements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionScopeBase`1" />
      </containers>
    </api>
    <api id="M:Gemstone.Expressions.Model.ValueExpressionScopeBase`1.#ctor">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionScopeBase.cs" />
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionScopeBase`1" ref="true" />
      </containers>
    </api>
    <api id="P:Gemstone.Expressions.Model.ValueExpressionScopeBase`1.Instance">
      <topicdata group="api" />
      <apidata name="Instance" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <sourceContext file="Gemstone.Expressions/Model/ValueExpressionScopeBase.cs" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Instance" />
      <setter name="set_Instance" />
      <returns>
        <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionScopeBase`1" />
      </returns>
      <implements>
        <member api="P:Gemstone.Expressions.Model.IValueExpressionScope`1.Instance">
          <type api="T:Gemstone.Expressions.Model.IValueExpressionScope`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Gemstone.Expressions.Model.ValueExpressionScopeBase`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Gemstone.Expressions" module="Gemstone.Expressions" kind="DynamicallyLinkedLibrary">
          <assemblydata version="1.0.7 -- Release Build" />
          <noAptca />
        </library>
        <namespace api="N:Gemstone.Expressions.Model" />
        <type api="T:Gemstone.Expressions.Model.ValueExpressionScopeBase`1" ref="true" />
      </containers>
    </api>
  </apis>
</reflection>